#!/usr/bin/perl

use warnings;
use strict;

use File::Spec;
use Cwd qw(abs_path);
use File::Basename qw(dirname);
use File::Copy qw(move copy);
use Getopt::Std qw(getopts);

sub hashloop(&$@);
sub usage;
sub fatal;

$| = 1;

my %ext2coll = qw(
    .jpg    photos
    .jpeg   photos
    .avi    videos
    .mp4    videos
    .mpg    videos
    .mpeg   videos
    .wav    music
);
my %coll2dir;
my %coll2namer;

(my $prog = $0) =~ s{.+/}{};

my (%opt, %conf);
my $conf = $ENV{UFO_CONF} ||= glob('~/etc/uforc')
    || glob('~/.uforc') || glob('/etc/ufo/ufo.conf');
read_conf($conf) if defined $conf;

my $root = $ENV{UFO_ROOT} ||= $conf{root}
    ||= glob('~/var/ufo') || glob('~/.ufo')
    || glob('/var/local/ufo')
    || fatal "Can't determine ufo root directory";

@ARGV = qw(help) if !@ARGV;

my $cmd = shift;
&{ __PACKAGE__->can('cmd_' . $cmd) || usage };

# --- Main functions

sub cmd_import {
    #@ import [-xXlvn] [-c COLL] [-e EXT] [-h FILE] FILE|DIR... :: import files
    getopts(':c:e:h:lxXvn', \%opt) or usage;
    $opt{e} =~ s/^(?=[^.])/./ if defined $opt{e};
    if (defined $opt{c}) {
        $ext2coll{$opt{e} // ''} = $opt{c};
    }
    elsif (defined $opt{e}) {
        usage;
    }
    $opt{x} = 1 if $opt{X} || $opt{l};
    my @files = argv2files();
    usage if !@files;
    my (@imported, @already_imported, %link, %coll2fh);
    hashloop {
        my ($hash, $f) = @_;
        print "> $f\n";
        my $c = dcoll($f);
        my $m = mpath($c, $hash, $f);
        if (!defined $c) {
            print "? no collection\n" if $opt{v};
        }
        elsif (-e $m) {
            print "- $m\n";
            push @already_imported, $f if $opt{X};
        }
        else {
            my $md = dirname($m);
            if (!-d $md) {
                mkdir $md or fatal "mkdir $md: $!";
            }
            copy $f, $m or fatal "copy $f $m: $!" if !$opt{n};
            if ($opt{l}) {
                $link{$f} = File::Spec->abs2rel(abs_path($m), dirname(abs_path($f)));
            }
            print "+ $m $f\n";
            my $fh = $coll2fh{$c};
            if (!$fh) {
                open $fh, '>>', "$c/ufo.log" or fatal "open $c/ufo.log for writing: $!";
                $coll2fh{$c} = $fh;
            }
            print $fh "$m $f\n";
            push @imported, $f;
        }
        print "\n";
    } $opt{h}, @files;
    return if $opt{n} || !$opt{x};
    foreach my $f (@imported, @already_imported) {
        unlink $f;
        if ($opt{l}) {
            symlink $link{$f}, $f;
        }
    }
}

sub cmd_check {
    #@ check [-pqv] [-h FILE] FILE|DIR... :: check to see files have been imported
    getopts(':h:pqv', \%opt) or usage;
    my @files = argv2files();
    usage if !@files;
    hashloop {
        my ($hash, $f) = @_;
        my $c = dcoll($f);
        my $m = mpath($c, $hash, $f);
        if (!defined $m) {
            print STDERR "No collection: $f\n" if !$opt{q};
        }
        elsif (-e $m) {
            print STDERR $opt{p} ? "- $m $f\n"
                                 : "- $hash $f\n";
        }
        elsif ($opt{p}) {
            print STDERR "+ $m $f\n";
        }
        else {
            print STDERR "+ $hash $f\n";
        }
    } $opt{h}, @files;
}

sub cmd_commands {
    #@ commands :: list all ufo commands
    goto &usage_commands;
}

sub cmd_help {
    #@ help [COMMAND] :: show helpful information
    goto &usage_commands if !@ARGV || @ARGV == 1 && $ARGV[0] eq 'commands';
    my ($commands, $wcmd, $wargs) = commands(@ARGV);
    while (@$commands) {
        my ($cmd, $args, $desc, @notes) = @{ shift @$commands };
        print STDERR <<"EOS";
$prog $cmd $args
  $desc
EOS
        if (@notes) {
            print '  ', $_, "\n" for @notes;
        }
        print STDERR "\n" if @$commands;
    }
}

# --- Other functions

sub hashloop(&$@) {
    my $proc = shift;
    my $hashf = shift;
    my $unlink;
    if (!defined $hashf) {
        $hashf = "/tmp/ufo.$$.sha256sum";
        $unlink = 1;
    }
    my ($fhin, $fhout, %hash);
    if (-s $hashf) {
        open $fhin, '<', $hashf or fatal "open $hashf for reading: $!";
    }
    else {
        open $fhout, '>>', $hashf or fatal "open $hashf for writing: $!";
        print STDERR "Saving checksums to $hashf\n";
        open $fhin, '-|', 'sha256sum', @_ or fatal "sha256sum: $!";
    }
    while (<$fhin>) {
        print $fhout $_ if defined $fhout;
        my ($hash, $f) = split /\s+\*?/, $_, 2;
        chomp $f;
        $proc->($hash, $f);
    }
    close $fhin or fatal "close $hashf: $!";
    close $fhout or fatal "close $hashf: $!" if defined $fhout;
    unlink $hashf if $unlink;
}

sub ext {
    my ($f) = @_;
    return '' if $f !~ m{(\.[^/]+)$};
    return lc $1;
}

sub dcoll {
    # Destination collection: where a file belongs
    my ($f) = @_;
    my $ext = ext($f);
    my $c = $opt{c} // $ext2coll{$ext};
    return if !defined $c;
    $c =~ s{^(?!/)}{$root/};
    return $c;
}

sub mpath {
    my ($c, $hash, $f) = @_;
    return if !defined $c;
    return coll2namer($c)->($hash, ext($f));
}

sub argv2files {
    my @argv = @ARGV;
    my @files;
    if (@argv) {
        # Nothing special to do
    }
    elsif (-t STDIN) {
        @argv = qw(.);
    }
    else {
        # Read files from standard input
        @argv = <STDIN>;
        chomp @argv;
    }
    while (@argv) {
        my $f = shift @argv;
        if (-d $f) {
            unshift @argv, grep {
                -d $_ || defined $ext2coll{ext($_)}
            } glob("$f/*");
        }
        elsif (-f _) {
            push @files, $f;
        }
        else {
            # Not a file or directory
        }
    }
    return @files;
}

sub coll2namer {
    my ($c) = @_;
    return $coll2namer{$c} if defined $coll2namer{$c};
    my @dirs2 = grep { m{/[0-9a-f]{2}$}i && -d } glob("$c/00/??");
    my @dirs1 = grep { m{/[0-9a-f]{2}$}i && -d } glob("$c/??");
    my @dirs0 = grep { m{/[0-9a-f]$}i && -d } glob("$c/?");
    my $namer;
    if (@dirs2) {
        $namer = sub {
            my ($hash, $ext) = @_;
            sprintf '%s/%s/%s/%s%s', $c, substr($hash,0,2), substr($hash,2,2), $hash, $ext;
        }
    }
    elsif (@dirs1) {
        $namer = sub {
            my ($hash, $ext) = @_;
            sprintf '%s/%s/%s%s', $c, substr($hash,0,2), $hash, $ext;
        }
    }
    elsif (@dirs0) {
        $namer = sub {
            my ($hash, $ext) = @_;
            sprintf '%s/%s/%s%s', $c, substr($hash,0,1), $hash, $ext;
        }
    }
    else {
        $namer = sub {
            my ($hash, $ext) = @_;
            sprintf '%s/%s%s', $c, $hash, $ext;
        }
    }
    return $coll2namer{$c} = $namer;
}

sub usage_commands {
    my ($commands, $wcmd, $wargs) = commands();
    print STDERR "usage: $prog COMMAND [ARG]...\n";
    print STDERR "commands:\n";
    foreach (@$commands) {
        printf STDERR "  %-${wcmd}.${wcmd}s %-${wargs}.${wargs}s  %s\n", @$_;
    }
    exit 1;
}

sub commands {
    my %want = map { $_ => 1 } @_;
    open my $fh, '<', $0 or return;
    my ($wcmd, $wargs) = (0, 0);
    my ($lcmd, $largs);
    my @commands;
    while (<$fh>) {
        if (s/^\s*#@ (\S+)(?:\s+(.+))?\s+::\s+(.+)//) {
            next if %want && !$want{$1};
            my ($cmd, $args, $desc) = ($1, $2 || '', $3);
            chomp;
            ($lcmd, $largs) = (length $cmd, length $args);
            $wcmd = $lcmd if $lcmd > $wcmd;
            $wargs = $largs if $largs > $wargs;
            my @cmd = ($cmd, $args, ucfirst $desc);;
            push @commands, \@cmd;
            while (<$fh>) {
                last if !s/^\s*#@ //;
                chomp;
                push @cmd, $_;
            }
        }
    }
    close $fh;
    return ([ sort { lc $a->[0] cmp lc $b->[0] } @commands ], $wcmd, $wargs);
}

sub read_conf {
    my ($f) = @_;
    open my $fh, '<', $f or fatal "open $f: $!";
    while (<$fh>) {
        next if /^\s*(?:#.*)?$/;  # Skip blank lines and comments
        if (/^\s*(\S+)\s+(.*)$/) {
            $conf{$1} = $2;
        }
    }
}

sub usage {
    my ($commands, $wcmd, $wargs) = commands();
    if (my ($c) = grep { $_->[0] eq $cmd } @$commands) {
        printf STDERR "usage: $prog %s %s\n", @$c[0..1];
        exit 1;
    }
    print STDERR "usage: $prog COMMAND [ARG]...\n";
    exit 1;
}

sub fatal {
    print STDERR $prog, ": @_\n";
    exit 2;
}
